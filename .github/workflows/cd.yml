name: CD

on:
  release:
    types: [ published ]

jobs:
  build_and_publish:
    name: Build and deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - id: version
      uses: actions/github-script@v3
      with:
        result-encoding: string
        script: return context.ref.replace('/refs/tags/v', '')
    - run: git --version
    - run: git rev-parse HEAD
    - run: git rev-parse HEAD~1
    - run: git rev-parse HEAD^
    - id: prev_version
      run: echo "::set-output name=result::$(git describe HEAD~1 --tags --match "v[0-9]*" --abbrev=0)"
    - id: pull_request_commits
      run: echo "::set-output name=result::$(git log --pretty=format:%s --grep '#' ${{ steps.prev_version.outputs.result }}..)"
    - run: echo "${{ steps.pull_request_commits.outputs.result }}"
    - name: Update release body with pull requests changes
      uses: actions/github-script@v3
      with:
        result-encoding: string
        script: |
          const {exec} = require('child_process')
          const stdout = command => new Promise((resolve, reject) => exec(command, (error, stdout, stderr) => resolve(stdout.trim())))
          const prev_release = await stdout('git describe HEAD^ --tags --match "v[0-9]*" --abbrev=0')
          console.log('prev_release', prev_release)
          const commits = await stdout(`git log --reverse --pretty=format:%s --grep '#' ${prev_release}..`)
          console.log('commit command', `git log --reverse --pretty=format:%s --grep '#' ${prev_release}..`)
          console.log('commits', commits)
          console.log('splitted commits', commits.split('\n'))
          if (!commits) return
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/')
          const formatWithAuthor = async commit => {
            console.log('commit', commit)
            const pull_number = commit.match(/#\d*/)[0].substring(1)
            console.log('pull_number', pull_number)
            const pr = (await github.pulls.get({owner, repo, pull_number})).data
            console.log('pr', pr)
            console.log('labels', pr.labels)
            const skip_changelog = pr.labels.some(label => label.name == 'skip_changelog')
            return skip_changelog ? null : `- ${pr.title} by @${pr.user.login}\n`
          }
          const changes = await Promise.all(commits.split('\n').map(formatWithAuthor))
          const changesBody = changes.filter(ch => ch !== null).join('')
          const body = (context.payload.release.body || '') + `\n## Changes\n\n${changesBody}`
          const release_id = context.payload.release.id
          await github.repos.updateRelease({owner, repo, release_id, body})
